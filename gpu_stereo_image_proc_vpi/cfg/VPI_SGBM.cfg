#! /usr/bin/env python

# Declare parameters that control stereo processing


from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# disparity block matching pre-filtering parameters
downsample_enum = gen.enum([gen.const("Downsample_1",    int_t, 0, "Process image at full scale"),
                           gen.const("Downsample_2",     int_t, 1, "Shrink images by factor of 2 in both axes before processing"),
                           gen.const("Downsample_4",     int_t, 2, "Shrink images by factor of 4 in both axes before processing"),
                           gen.const("Downsample_8",     int_t, 3, "Shrink images by factor of 8 in both axes before processing")],
                           "Image downsampling factor")
gen.add("downsample", int_t, 0, "Downsample ratio", 2, 0, 3,
        edit_method = downsample_enum)

# disparity block matching correlation parameters
gen.add("correlation_window_size", int_t, 0, "SAD correlation window width, pixels", 5, 1, 7)
gen.add("max_disparity",           int_t, 0, "Disparity to finish search at, pixels (Must be divisible by 4)", 64, 0, 256)

gen.add("quality",                 int_t, 0, "Quality", 6, 1, 10)

gen.add("confidence_threshold", int_t, 0, "If confidence is available, retain points above this confidence (set to 0 to disable", 32767, 0, 32767);

gen.add("uniqueness_ratio",  double_t, 0, "Filter out if best match does not sufficiently exceed the next-best match", -1.0, -1.0, 1.0)
gen.add("P1", double_t, 0, "Smoothness penalty", 8, 0, 256)
gen.add("P2", double_t, 0, "Discontiguous pennalty", 109, 0, 256)



filtering_enum = gen.enum([gen.const("NoFilter", int_t, 0, "No disparity filtering"),
                           gen.const("BilateralFilter",      int_t, 1, "Use OpenCV Disparity Bilateral Filter"),
                           gen.const("WLSFilter_LeftRight",  int_t, 2, "Use OpenCV WLS Filter with both LR and RL consistency")],
                           "Disparity filtering options")
gen.add("disparity_filter", int_t, 0, "Disparity filtering", 0, 0, 3, edit_method = filtering_enum)


exit(gen.generate("gpu_stereo_image_proc_vpi", "gpu_stereo_image_proc_vpi", "VPI_SGBM"))
