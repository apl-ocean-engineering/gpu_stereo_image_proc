#! /usr/bin/env python

# Declare parameters that control stereo processing


from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# disparity block matching pre-filtering parameters
downsample_enum = gen.enum([gen.const("Downsample_1",    int_t, 0, "Process image at full scale"),
                           gen.const("Downsample_2",     int_t, 1, "Shrink images by factor of 2 in both axes before processing"),
                           gen.const("Downsample_4",     int_t, 2, "Shrink images by factor of 4 in both axes before processing"),
                           gen.const("Downsample_8",     int_t, 3, "Shrink images by factor of 8 in both axes before processing")],
                           "Image downsampling factor")
gen.add("downsample", int_t, 0, "Downsample ratio", 2, 0, 3,
        edit_method = downsample_enum)

# disparity block matching correlation parameters
#
# Correlation window size fixed at 5x5 for the CUDA implementation in VPI
#gen.add("correlation_window_size", int_t, 0, "SAD correlation window width, pixels", 5, 1, 7)
gen.add("max_disparity",           int_t, 0, "Disparity to finish search at, pixels (Must be divisible by 4)", 64, 0, 256)

gen.add("confidence_threshold", int_t, 0, "If confidence is available, retain points above this confidence (set to 0 to disable", 32767, 0, 65535);

gen.add("uniqueness_ratio",  double_t, 0, "Filter out if best match does not sufficiently exceed the next-best match", -1.0, -1.0, 1.0)
gen.add("P1", double_t, 0, "Smoothness penalty", 8, 0, 256)
gen.add("P2", double_t, 0, "Discontiguous pennalty", 109, 0, 256)

filtering_enum = gen.enum([gen.const("NoFilter", int_t, 0, "No disparity filtering"),
                           gen.const("BilateralFilter",      int_t, 1, "Use OpenCV Disparity Bilateral Filter")],
                           #gen.const("WLSFilter_LeftRight",  int_t, 2, "Use OpenCV WLS Filter with both LR and RL consistency")],
                           "Disparity filtering options")
gen.add("disparity_filter", int_t, 0, "Disparity filtering", 0, 0, 3, edit_method = filtering_enum)

gen.add("do_disparity_padding", bool_t, 0, "Should images be padded to estimate depth on the edges", False)

#
# ~~ Disparity filter params ~~
#

disparity_filter_group = gen.add_group("disp_filter")

# Radius = 3 and num_iters=1 is the default to the constructor:
#       https://github.com/opencv/opencv_contrib/blob/de84cc02a876894a4047ce31f7d9fd179f213e95/modules/cudastereo/include/opencv2/cudastereo.hpp#L338
disparity_filter_group.add("radius", int_t, 0, "Radius", 3, 0, 20)
disparity_filter_group.add("num_iters", int_t, 0, "Number of iterations", 1, 1, 20)

## Is it weird these aren't actually exposed through the OpenCV API?

# 10.0 is the default from the module code:
#      https://github.com/opencv/opencv_contrib/blob/de84cc02a876894a4047ce31f7d9fd179f213e95/modules/cudastereo/src/disparity_bilateral_filter.cpp#L125
#disparity_filter_group.add("sigma_range", double_t, 0, "Sigma range ", 10.0, 0.0, 20.0)

# 0.2 is the default from the module code:
#     https://github.com/opencv/opencv_contrib/blob/de84cc02a876894a4047ce31f7d9fd179f213e95/modules/cudastereo/src/disparity_bilateral_filter.cpp#L124
#disparity_filter_group.add("max_disc_threshold", double_t, 0, "Max disparity threshold", 0.2, 0.0, 1.0)

# 0.1 is the default from the modules code:
#     https://github.com/opencv/opencv_contrib/blob/de84cc02a876894a4047ce31f7d9fd179f213e95/modules/cudastereo/src/disparity_bilateral_filter.cpp#L123
#disparity_filter_group.add("edge_threshold", double_t, 0, "Edge threshold", 0.1, 0.0, 1.0)

# wls_filter_group = gen.add_group("wls_filter")
# wls_filter_group.add("lambda", double_t, 0, "Lambda is a parameter defining the amount of regularization during filtering. Larger values force filtered disparity map edges to adhere more to source image edges. ", 0, 8000.0, 16000)
# wls_filter_group.add("lrc_threshold", int_t, 0, "LRCthresh is a threshold of disparity difference used in left-right-consistency check during confidence map computation.", 24, 0, 48)


exit(gen.generate("gpu_stereo_image_proc_vpi", "gpu_stereo_image_proc_vpi", "VPI_SGBM"))
